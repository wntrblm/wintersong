{
  "version": 3,
  "sources": ["../src/base/livereload.ts", "../src/teeth.ts", "../src/base/web-components/context.ts", "../src/base/types.ts", "../src/base/web-components/css.ts", "../src/base/array.ts", "../src/base/async.ts", "../src/base/web-components/html.ts", "../src/base/web-components/custom-element.ts", "../src/base/functions.ts", "../src/base/strings.ts", "../src/base/web-components/decorators.ts", "../src/audio/context-manager.ts", "../src/base/media-queries.ts", "../src/audio/oscilloscope.ts", "../src/audio/player.ts", "../src/index.ts"],
  "sourcesContent": ["/*\n    Copyright (c) 2022 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\n/* globals DEBUG */\n// @ts-expect-error: defined by esbuild\nif (DEBUG) {\n    new EventSource(\"/esbuild\").addEventListener(\"change\", () =>\n        location.reload(),\n    );\n}\n", "/*\n    Copyright (c) 2021 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\n/**\n * Teeth encoding/decoding routines\n *\n * > What the heck is Teeth encoding?\n *\n * It's a really dumb encoding scheme designed to deal with sending data over\n * MIDI SysEx which is limited to 7-bit values. It encodes each 32-bit (4 byte)\n * value using 5 bytes, therefore, it has a 25% overhead. It's designed to\n * be deterministic so that C implementations can avoid dynamic allocation -\n * regardless of the number of items in the encoder input, the encoded output\n * is *always* a deterministic multiple of 5.\n *\n * The basic scheme is that the following 32-bit value:\n *\n *     0x1AAA AAAA\n *     0x2BBB BBBB\n *     0x3CCC CCCC\n *     0x4DDD DDDD\n *\n * Gets encoded as:\n *\n *     0x4A <--- header byte\n *     0x0AAA AAAA\n *     0x0BBB BBBB\n *     0x0CCC CCCC\n *     0x0DDD DDDD\n *\n * The header byte's upper nibble is number of following bytes, its max value is\n * 4. This allows encoding and decoding arrays that aren't a multiple of 4 bytes\n * in length and preserving the length during decoding.\n *\n * The second nibble contains the most significant bit for each of the\n * directly following bytes as 0b1234.\n *\n * > Why the HECK did you name it Teeth?\n *\n * It works on 32-bit values and humans happen to have 32 teeth, also, it takes\n * one more byte than usual to encode so it's an *overbyte*...\n *\n */\nexport default class Teeth {\n    static encodedLength(src_len: number | Uint8Array): number {\n        if (src_len instanceof Uint8Array) {\n            src_len = src_len.length;\n        }\n        return Math.floor((src_len + 4 - 1) / 4) * 5;\n    }\n\n    static encode(src: Uint8Array): Uint8Array {\n        const src_len = src.length;\n        let dst = new Uint8Array(this.encodedLength(src_len));\n        let src_idx = 0;\n        let dst_idx = 0;\n\n        while (src_idx < src_len) {\n            // There's 4 or more bytes left\n            if (src_idx + 4 <= src_len) {\n                // First byte carries the leftover bits.\n                dst[dst_idx] =\n                    0x40 |\n                    ((src[src_idx]! & 0x80) >> 4) |\n                    ((src[src_idx + 1]! & 0x80) >> 5) |\n                    ((src[src_idx + 2]! & 0x80) >> 6) |\n                    ((src[src_idx + 3]! & 0x80) >> 7);\n                // Subsequent bytes carry their lower 7 bits.\n                dst[dst_idx + 1] = src[src_idx]! & 0x7f;\n                dst[dst_idx + 2] = src[src_idx + 1]! & 0x7f;\n                dst[dst_idx + 3] = src[src_idx + 2]! & 0x7f;\n                dst[dst_idx + 4] = src[src_idx + 3]! & 0x7f;\n                dst_idx += 5;\n                src_idx += 4;\n            }\n            // There's only 3 bytes left\n            else if (src_idx + 3 == src_len) {\n                dst[dst_idx] =\n                    0x30 |\n                    ((src[src_idx]! & 0x80) >> 4) |\n                    ((src[src_idx + 1]! & 0x80) >> 5) |\n                    ((src[src_idx + 2]! & 0x80) >> 6);\n                dst[dst_idx + 1] = src[src_idx]! & 0x7f;\n                dst[dst_idx + 2] = src[src_idx + 1]! & 0x7f;\n                dst[dst_idx + 3] = src[src_idx + 2]! & 0x7f;\n                dst_idx += 4;\n                src_idx += 3;\n            }\n            // There's only 2 bytes left\n            else if (src_idx + 2 == src_len) {\n                dst[dst_idx] =\n                    0x20 |\n                    ((src[src_idx]! & 0x80) >> 4) |\n                    ((src[src_idx + 1]! & 0x80) >> 5);\n                dst[dst_idx + 1] = src[src_idx]! & 0x7f;\n                dst[dst_idx + 2] = src[src_idx + 1]! & 0x7f;\n                dst_idx += 3;\n                src_idx += 2;\n            }\n            // There's only 1 byte left\n            else if (src_idx + 1 == src_len) {\n                dst[dst_idx] = 0x10 | ((src[src_idx]! & 0x80) >> 4);\n                dst[dst_idx + 1] = src[src_idx]! & 0x7f;\n                dst_idx += 2;\n                src_idx += 1;\n            } else {\n                break;\n            }\n        }\n\n        return dst;\n    }\n\n    static decode(src: Uint8Array): Uint8Array {\n        const src_len = src.length;\n        const dst_len = (src_len / 5) * 4;\n        let dst = new Uint8Array(dst_len);\n        let src_idx = 0;\n        let dst_idx = 0;\n\n        while (src_idx < src_len) {\n            dst[dst_idx] = ((src[src_idx]! & 0x8) << 4) | src[src_idx + 1]!;\n            dst[dst_idx + 1] = ((src[src_idx]! & 0x4) << 5) | src[src_idx + 2]!;\n            dst[dst_idx + 2] = ((src[src_idx]! & 0x2) << 6) | src[src_idx + 3]!;\n            dst[dst_idx + 3] = ((src[src_idx]! & 0x1) << 7) | src[src_idx + 4]!;\n            let len_marker = src[src_idx]! >> 4;\n            dst_idx += len_marker;\n            src_idx += 5;\n        }\n\n        return dst.slice(0, dst_idx);\n    }\n}\n", "/*\n    Copyright (c) 2022 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nimport type { Constructor } from \"../types\";\n\n/**\n * CustomElement context, used to manage shared state.\n *\n * Elements can provide state in the form of context to child elements using\n * provideContext() and child elements can request context from ancestors\n * using requestContext().\n *\n * Loosely based on https://github.com/webcomponents-cg/community-protocols/blob/main/proposals/context.md,\n * but *greatly* simplified.\n */\n\nexport type ContextRequestCallback<T = unknown> = (context: T) => void;\n\n/**\n * Context request event\n *\n * Dispatch this event to request context from ancestors. Ancestors can listen\n * for the event and invoke the provided callback to provide context. Invoking\n * the callback will automatically stop the event's propagation.\n */\nexport class ContextRequestEvent<T = unknown> extends Event {\n    static type = \"context-request\";\n\n    constructor(\n        public context_name: string,\n        private _callback: ContextRequestCallback<T>,\n    ) {\n        super(ContextRequestEvent.type, {\n            bubbles: true,\n            cancelable: true,\n            composed: true,\n        });\n    }\n\n    callback(context: T) {\n        this.stopPropagation();\n        this._callback(context);\n    }\n}\n\n/**\n * Requests context from ancestors asynchronously.\n *\n * Handles the details of dispatching the ContextRequestEvent and wraps it\n * all up in a promise. Note that if no ancestor provides the context, the\n * promise will never resolve.\n */\nexport async function requestContext<T = unknown>(\n    target: EventTarget,\n    context_name: string,\n): Promise<T> {\n    return new Promise((resolve) => {\n        target.dispatchEvent(\n            new ContextRequestEvent<T>(context_name, (context: T) => {\n                resolve(context);\n            }),\n        );\n    });\n}\n\n/**\n * Provides context to descendants.\n *\n * Handles the details of listening to ContextRequestEvents and responding\n * with the given context if it matches the context name.\n */\nexport function provideContext<T>(\n    target: EventTarget,\n    context_name: string,\n    context: T,\n) {\n    target.addEventListener(ContextRequestEvent.type, (e) => {\n        const request_event = e as ContextRequestEvent<T>;\n        if (request_event.context_name == context_name) {\n            request_event.callback(context);\n        }\n    });\n}\n\n/**\n * Like requestContext but used when the provider passes a function that\n * should be called to obtain the context. Useful for setting up context\n * providers in constructors before the actual context value is available.\n */\nexport async function requestLazyContext<T = unknown>(\n    target: EventTarget,\n    context_name: string,\n): Promise<T> {\n    return (await requestContext<() => T>(target, context_name))();\n}\n\n/**\n * Like provideContext but used with requestLazyContext\n */\nexport async function provideLazyContext<T = unknown>(\n    target: EventTarget,\n    context_name: string,\n    context: () => T,\n) {\n    provideContext(target, context_name, context);\n}\n\n/**\n * Mixin used to add provideContext and requestContext methods.\n */\nexport function WithContext<T extends Constructor<HTMLElement>>(Base: T) {\n    return class WithContext extends Base {\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        /** Request context from ancestors */\n        async requestContext<T = unknown>(context_name: string) {\n            return await requestContext<T>(this, context_name);\n        }\n\n        /** Provide context to descendants */\n        provideContext<T = unknown>(context_name: string, context: T) {\n            provideContext<T>(this, context_name, context);\n        }\n\n        /** Request context from ancestors lazily */\n        async requestLazyContext<T = unknown>(context_name: string) {\n            return await requestLazyContext<T>(this, context_name);\n        }\n\n        /** Provide context to descendants lazily */\n        provideLazyContext<T = unknown>(\n            context_name: string,\n            context: () => T,\n        ) {\n            provideLazyContext<T>(this, context_name, context);\n        }\n    };\n}\n", "/*\n    Copyright (c) 2022 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nexport type Primitive =\n    | null\n    | undefined\n    | boolean\n    | number\n    | string\n    | symbol\n    | bigint;\n\nexport function isPrimitive(value: unknown): value is Primitive {\n    return (\n        value === null ||\n        (typeof value != \"object\" && typeof value != \"function\")\n    );\n}\n\nexport function isString(value: unknown): value is string {\n    return typeof value === \"string\";\n}\n\nexport function isNumber(value: unknown): value is number {\n    return typeof value === \"number\" && !isNaN(value);\n}\n\nexport function isIterable<T>(value: unknown): value is Iterable<T> {\n    return (\n        Array.isArray(value) ||\n        typeof (value as any)?.[Symbol.iterator] === \"function\"\n    );\n}\n\nexport function isArray<T = unknown>(value: unknown): value is T[] {\n    return Array.isArray(value);\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isObject(value: unknown): value is Object {\n    return (\n        typeof value === \"object\" &&\n        value !== null &&\n        !Array.isArray(value) &&\n        !(value instanceof RegExp) &&\n        !(value instanceof Date)\n    );\n}\n\nexport type Constructor<T = unknown> = new (...args: any[]) => T;\nexport type AnyFunction = (...args: any[]) => any;\nexport type InferArgs<T> = T extends (...t: [...infer Arg]) => any\n    ? Arg\n    : never;\nexport type InferReturn<T> = T extends (...t: [...infer Arg]) => infer Res\n    ? Res\n    : never;\n", "/*\n    Copyright (c) 2023 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nimport { isNumber } from \"../types\";\n\nconst stylesheet_cache = new Map<string, CSSStyleSheet>();\n\nexport class CSS {\n    constructor(public readonly css_string: string) {}\n\n    get stylesheet(): CSSStyleSheet {\n        let sheet = stylesheet_cache.get(this.css_string);\n\n        if (sheet == undefined) {\n            sheet = new CSSStyleSheet();\n            sheet.replaceSync(this.css_string);\n            stylesheet_cache.set(this.css_string, sheet);\n        }\n\n        return sheet;\n    }\n}\n\nexport function css(\n    strings: TemplateStringsArray,\n    ...values: (CSS | number)[]\n) {\n    let text = \"\";\n    for (let i = 0; i < strings.length - 1; i++) {\n        text += strings[i];\n\n        const value = values[i];\n\n        if (value instanceof CSS) {\n            text += value.css_string;\n        } else if (isNumber(value)) {\n            text += String(value);\n        } else {\n            throw new Error(\n                \"Only CSS or number variables allowed in css template literal\",\n            );\n        }\n    }\n\n    text += strings.at(-1);\n\n    return new CSS(text);\n}\n\nexport function adoptStyles(\n    root: ShadowRoot | Document,\n    styles: (CSS | CSSStyleSheet)[],\n) {\n    root.adoptedStyleSheets = root.adoptedStyleSheets.concat(\n        styles.map((ss) => (ss instanceof CSSStyleSheet ? ss : ss.stylesheet)),\n    );\n}\n", "/*\n    Copyright (c) 2023 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nimport { isArray, isIterable } from \"./types\";\n\nexport function asArray<T>(x: T | T[]): T[];\nexport function asArray<T>(x: T | readonly T[]): readonly T[];\nexport function asArray<T>(x: T | T[]): T[] {\n    if (isArray(x)) {\n        return x;\n    }\n    return [x];\n}\n\nexport function iterableAsArray<T>(x: T | T[] | Iterable<T>): T[] {\n    if (isArray(x)) {\n        return x;\n    }\n    if (isIterable(x)) {\n        return Array.from(x);\n    }\n    return [x];\n}\n\nconst collator = new Intl.Collator(undefined, { numeric: true });\n\nexport function sortedByNumericStrings<T>(\n    array: T[],\n    getter: (item: T) => string,\n) {\n    return array.slice().sort((a, b) => collator.compare(getter(a), getter(b)));\n}\n", "/*\n    Copyright (c) 2023 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\n/**\n * Waits the given number of milliseconds and resolves.\n */\nexport async function wait(delay: number) {\n    return new Promise<void>((resolve) => {\n        window.setTimeout(() => {\n            resolve();\n        }, delay);\n    });\n}\n\n/**\n * Schedules a callback to be executed by the event loop.\n *\n * Equivalent to window.setTimeout(..., 0);\n */\nexport function later(callback: () => unknown) {\n    window.setTimeout(() => {\n        callback();\n    }, 0);\n}\n\n/**\n * Schedules a callback to be executed when the browser is idle or\n * when deadline milliseconds have passed.\n */\nexport function whenIdle(callback: () => unknown, deadline = 1000) {\n    const token = window.requestIdleCallback(\n        () => {\n            callback();\n        },\n        { timeout: deadline },\n    );\n    return {\n        dispose: () => {\n            window.cancelIdleCallback(token);\n        },\n    };\n}\n\nconst enum DeferredOutcome {\n    Resolved,\n    Rejected,\n}\n\n/**\n * A promise that can be resolved or rejected imperatively.\n */\nexport class DeferredPromise<T> {\n    #promise: Promise<T>;\n    #resolve: (value: T) => void;\n    #reject: (error: Error) => void;\n    #outcome?: DeferredOutcome;\n    #value?: T | Error;\n\n    constructor() {\n        this.#promise = new Promise<T>((resolve, reject) => {\n            this.#resolve = resolve;\n            this.#reject = reject;\n        });\n    }\n\n    get rejected() {\n        return this.#outcome === DeferredOutcome.Rejected;\n    }\n\n    get resolved() {\n        return this.#outcome === DeferredOutcome.Resolved;\n    }\n\n    get settled() {\n        return !!this.#outcome;\n    }\n\n    get value() {\n        return this.#value;\n    }\n\n    then<TResult1 = T, TResult2 = never>(\n        onfulfilled?:\n            | ((value: T) => TResult1 | PromiseLike<TResult1>)\n            | undefined\n            | null,\n        onrejected?:\n            | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n            | undefined\n            | null,\n    ): Promise<TResult1 | TResult2> {\n        return this.#promise.then(onfulfilled, onrejected);\n    }\n\n    resolve(value: T) {\n        this.#outcome = DeferredOutcome.Resolved;\n        this.#value = value;\n        this.#resolve(value);\n    }\n\n    reject(error: Error) {\n        this.#outcome = DeferredOutcome.Rejected;\n        this.#value = error;\n        this.#reject(error);\n    }\n}\n\n/**\n * A \"Barrier\" for waiting for a task to complete before taking an action.\n */\nexport class Barrier extends DeferredPromise<boolean> {\n    get isOpen(): boolean {\n        return this.resolved && this.value === true;\n    }\n\n    open(): void {\n        this.resolve(true);\n    }\n}\n", "/*\n    Copyright (c) 2023 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nimport { isIterable, isPrimitive } from \"../types\";\n\nexport type ElementOrFragment = HTMLElement | DocumentFragment;\n\nexport function isHTMLElement(v: any): v is HTMLElement {\n    return typeof HTMLElement === \"object\" && v instanceof HTMLElement;\n}\n\n/**\n * A tagged template literal that generates HTML\n *\n * This is loosely inspired by Lit's html, but vastly simplified for our use\n * case. We don't do any reactivity or automatic updating, so a lot of the\n * code required to synchronize and update DOM elements automatically isn't\n * needed.\n *\n * There are two key properties that this needs to have:\n * - It must limit the location of variable expansion so we can effectively\n *   work against XSS.\n * - Any elements used in the template literal should retain their identity\n *   once placed in the rendered tree.\n */\nexport function html(\n    strings: TemplateStringsArray,\n    ...values: unknown[]\n): ElementOrFragment {\n    const template = document.createElement(`template`);\n\n    template.innerHTML = prepare_template_html(strings, values);\n    let content = template.content;\n\n    content = document.importNode(content, true);\n\n    apply_values_to_tree(content, values);\n\n    if (content.childElementCount == 1) {\n        return content.firstElementChild as HTMLElement;\n    } else {\n        return content;\n    }\n}\n\n/**\n * A tagged template literal that allows text to pass through the html\n * literal as-is, before variable interpolation happens.\n */\nexport function literal(strings: TemplateStringsArray, ...values: unknown[]) {\n    let str = \"\";\n    strings.forEach((string, i) => {\n        str += string + (values[i] ?? \"\");\n    });\n    return new Literal(str);\n}\n\nclass Literal {\n    constructor(public text: string) {}\n}\n\nconst placeholder_regex = /\\$\\$:(\\d+):\\$\\$/g;\n\n/**\n * Processes a given template literal into a suitable html template string.\n *\n * Inserts placeholders into the string for every replacement. These\n * placeholders will later be used to modify the constructed DOM node's\n * attributes and content.\n */\nfunction prepare_template_html(\n    strings: TemplateStringsArray,\n    values: unknown[],\n) {\n    const template_parts = [];\n\n    for (let i = 0; i < strings.length - 1; i++) {\n        template_parts.push(strings[i]);\n\n        if (values[i] instanceof Literal) {\n            template_parts.push((values[i]! as Literal).text);\n        } else {\n            template_parts.push(`$$:${i}:$$`);\n        }\n    }\n\n    template_parts.push(strings[strings.length - 1]);\n\n    const template_string = template_parts.join(\"\");\n    return template_string;\n}\n\n/**\n * Walks through the give DOM tree and replaces placeholders with values.\n */\nfunction apply_values_to_tree(tree: DocumentFragment, values: unknown[]) {\n    const walker = document.createTreeWalker(\n        tree,\n        NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT,\n        null,\n    );\n    let node;\n\n    while ((node = walker.nextNode()) !== null) {\n        if (node.nodeType == Node.TEXT_NODE) {\n            apply_content_value(node.parentNode, node as Text, values);\n        } else if (node.nodeType == Node.ELEMENT_NODE) {\n            const elm = node as HTMLElement;\n            for (const attr_name of elm.getAttributeNames()) {\n                const attr = elm.getAttributeNode(attr_name)!;\n                apply_attribute_value(elm, attr, values);\n            }\n        }\n    }\n}\n\n/**\n * Apply template values to a node's text content.\n */\nfunction apply_content_value(node: Node | null, text: Text, values: unknown[]) {\n    if (!node) {\n        return;\n    }\n\n    const parts = text.data.split(placeholder_regex);\n\n    if (!parts || parts.length == 1) {\n        return;\n    }\n\n    if (isHTMLElement(node) && [\"script\", \"style\"].includes(node.localName)) {\n        throw new Error(\n            `Cannot bind values inside of <script> or <style> tags`,\n        );\n    }\n\n    for (let i = 0; i < parts.length; i++) {\n        const part = parts[i];\n        // Don't bother adding empty text\n        if (!part) {\n            continue;\n        }\n        // Even parts are text nodes.\n        if (i % 2 == 0) {\n            node.insertBefore(new Text(part), text);\n        }\n        // Odd parts are placeholders.\n        else {\n            for (const value of convert_value_for_content(\n                values[parseInt(part, 10)],\n            )) {\n                if (value == null) continue;\n                node.insertBefore(value, text);\n            }\n        }\n    }\n\n    // clear the text data instead of removing the node, since removing it will\n    // break the tree walker.\n    text.data = \"\";\n}\n\n/**\n * Apply template values to an element's attribute.\n */\nfunction apply_attribute_value(\n    elm: HTMLElement,\n    attr: Attr,\n    values: unknown[],\n) {\n    const parts = attr.value.split(placeholder_regex);\n\n    if (!parts || parts.length == 1) {\n        return;\n    }\n\n    if (attr.localName.startsWith(\"on\")) {\n        throw new Error(`Cannot bind to event handler ${attr.localName}.`);\n    }\n\n    if (parts.length == 3 && parts[0] == \"\" && parts[2] == \"\") {\n        // special case of attr=\"${value}\", which explicitly handles true/false\n        const value = values[parseInt(parts[1]!, 10)];\n        if (value === true) {\n            attr.value = \"\";\n        } else if (value === false || value === null || value === undefined) {\n            elm.removeAttribute(attr.name);\n        } else {\n            attr.value = convert_value_for_attr(value, attr.name);\n        }\n        return;\n    }\n\n    attr.value = attr.value.replaceAll(\n        placeholder_regex,\n        (_: string, number: string) => {\n            const value = values[parseInt(number, 10)];\n            return convert_value_for_attr(value, attr.localName) as string;\n        },\n    );\n}\n\nfunction* convert_value_for_content(\n    value: unknown,\n): Generator<Node | Text | null> {\n    if (value == null || value == undefined) {\n        return;\n    }\n    if (isPrimitive(value)) {\n        yield new Text(value.toString());\n        return;\n    }\n    if (value instanceof Node || value instanceof DocumentFragment) {\n        yield value;\n        return;\n    }\n    if (isIterable(value)) {\n        for (const i of value) {\n            yield* convert_value_for_content(i);\n        }\n        return;\n    }\n    throw new Error(`Invalid value ${value}`);\n}\n\nfunction convert_value_for_attr(value: unknown, attr_name: string): string {\n    if (value == null || value == undefined) {\n        return \"\";\n    }\n    if (isPrimitive(value)) {\n        return value.toString();\n    }\n    if (isIterable(value)) {\n        return Array.from(value)\n            .map((v) => convert_value_for_attr(v, attr_name))\n            .join(\"\");\n    }\n    throw new Error(`Invalid value ${value}`);\n}\n", "/*\n    Copyright (c) 2023 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nimport { asArray } from \"../array\";\nimport { DeferredPromise } from \"../async\";\nimport { adoptStyles, type CSS } from \"./css\";\nimport { html, literal } from \"./html\";\nexport { html, literal };\n\n/**\n * Base CustomElement class, provides common helpers and behavior.\n */\nexport class CustomElement extends HTMLElement {\n    /**\n     * Styles added to the shadowRoot, can be a string or list of strings.\n     */\n    static styles: (CSS | CSSStyleSheet) | (CSS | CSSStyleSheet)[];\n\n    // Constructed stylesheets shared among instances.\n    static _constructed_styles: CSSStyleSheet[];\n\n    /**\n     * If true, a shadowRoot is created for this element.\n     */\n    static useShadowRoot = true;\n\n    /**\n     * Exports nested shadow dom parts\n     * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/exportparts\n     */\n    static exportparts: string[] = [];\n\n    protected updateComplete: DeferredPromise<boolean> =\n        new DeferredPromise<boolean>();\n\n    constructor() {\n        super();\n\n        const static_this = this.constructor as typeof CustomElement;\n\n        if (static_this.exportparts.length) {\n            this.setAttribute(\"exportparts\", static_this.exportparts.join(\",\"));\n        }\n    }\n\n    /**\n     * Returns either the shadowRoot or this if useShadowRoot is false.\n     */\n    get renderRoot(): ShadowRoot | this {\n        return this.shadowRoot ?? this;\n    }\n\n    /**\n     * Called when connected to the DOM\n     *\n     * By default it calls render() to place the initial content to the\n     * renderRoot.\n     */\n    connectedCallback(): void | undefined {\n        this.#renderInitialContent();\n    }\n\n    disconnectedCallback(): void | undefined {}\n\n    /**\n     * Called after the initial content is added to the renderRoot, perfect\n     * for registering event callbacks.\n     */\n    initialContentCallback(): void | undefined {}\n\n    /**\n     * Called to render content to the renderRoot.\n     */\n    render(): Element | DocumentFragment {\n        return html``;\n    }\n\n    renderedCallback(): void | undefined {}\n\n    async update() {\n        this.updateComplete = new DeferredPromise<boolean>();\n        while (this.renderRoot.firstChild) {\n            this.renderRoot.firstChild.remove();\n        }\n        this.renderRoot.appendChild(await this.render());\n        this.renderedCallback();\n        window.requestAnimationFrame(() => {\n            this.updateComplete.resolve(true);\n        });\n        return this.updateComplete;\n    }\n\n    #renderInitialContent() {\n        const static_this = this.constructor as typeof CustomElement;\n        this.updateComplete = new DeferredPromise<boolean>();\n\n        if ((this.constructor as typeof CustomElement).useShadowRoot) {\n            this.attachShadow({ mode: \"open\" });\n        }\n\n        if (static_this.styles) {\n            adoptStyles(\n                this.shadowRoot ?? document,\n                asArray(static_this.styles),\n            );\n        }\n\n        (async () => {\n            const content = this.render();\n            this.renderRoot.appendChild(content);\n            this.renderedCallback();\n            this.initialContentCallback();\n            window.requestAnimationFrame(() => {\n                this.updateComplete.resolve(true);\n            });\n        })();\n\n        return this.updateComplete;\n    }\n\n    protected queryAssignedElements<T extends Element = HTMLElement>(\n        selector?: string,\n        slotName?: string,\n    ) {\n        const slot_element = this.renderRoot.querySelector(\n            `slot${slotName ? `[name=${slotName}]` : \":not([name])\"}`,\n        ) as HTMLSlotElement;\n\n        const elements = (slot_element?.assignedElements() ?? []) as T[];\n\n        if (selector) {\n            return elements.filter((elm) => elm.matches(selector));\n        } else {\n            return elements;\n        }\n    }\n}\n", "/*\n    Copyright (c) 2022 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nimport type { AnyFunction, InferArgs, InferReturn } from \"./types\";\n\nexport function noop() {}\n\n/**\n * Prevents a function from being executed while its already running.\n */\nexport function preventConcurrentCalls<T extends AnyFunction>(target: T) {\n    let isRunning = false;\n\n    return (...args: InferArgs<T>): InferReturn<T> | undefined => {\n        if (isRunning) {\n            return;\n        }\n\n        try {\n            isRunning = true;\n            return target(...args);\n        } finally {\n            isRunning = false;\n        }\n    };\n}\n", "/*\n    Copyright (c) 2024 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\n/**\n * Converts camelCase to dash-case\n */\nexport function camelToDash(str: string): string {\n    return str\n        .replace(/(^[A-Z])/, ([first]) => first!.toLowerCase())\n        .replace(/([A-Z])/g, ([letter]) => `-${letter!.toLowerCase()}`);\n}\n", "/*\n    Copyright (c) 2022 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nimport { noop, preventConcurrentCalls } from \"../functions\";\nimport { camelToDash } from \"../strings\";\n\nexport function attribute<Type = unknown, TypeHint = unknown>(options: {\n    type: TypeHint;\n    converter?: AttributeConverter<Type, TypeHint>;\n    onChange?: (oldValue: Type | null, newValue: Type | null) => void;\n}) {\n    const to =\n        options.converter?.toAttribute ?? defaultAttributeConverter.toAttribute;\n    const from =\n        options.converter?.fromAttribute ??\n        defaultAttributeConverter.fromAttribute;\n    const wrappedOnChange = preventConcurrentCalls(options.onChange ?? noop);\n\n    return (target: object, propertyKey: string | symbol): void => {\n        const attributeKey = camelToDash(propertyKey as string);\n\n        Object.defineProperty(target, propertyKey, {\n            enumerable: true,\n            configurable: true,\n            get() {\n                return from(this.getAttribute(attributeKey), options.type);\n            },\n            set(value: Type) {\n                const old = this[propertyKey];\n\n                const converted = to(value, options.type);\n\n                if (converted === null) {\n                    this.removeAttribute(attributeKey);\n                } else {\n                    this.setAttribute(attributeKey, converted);\n                }\n\n                wrappedOnChange(old, value);\n            },\n        });\n    };\n}\n\ninterface AttributeConverter<Type = unknown, TypeHint = unknown> {\n    toAttribute(value: Type, type?: TypeHint): unknown;\n    fromAttribute(value: string | null, type?: TypeHint): Type;\n}\n\nconst defaultAttributeConverter = {\n    toAttribute(value: unknown, type?: unknown): string | null {\n        if (value === null) {\n            return value;\n        }\n\n        switch (type) {\n            case Boolean:\n                return value ? \"\" : null;\n            case String:\n                return value as string;\n            case Number:\n                return `${value}`;\n            default:\n                throw new Error(\n                    `Can not convert type \"${type}\" and value \"${value} to attribute`,\n                );\n        }\n    },\n    fromAttribute(value: string | null, type?: unknown): unknown {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case String:\n                return value;\n            case Number:\n                return value === null ? null : Number(value);\n            default:\n                throw new Error(\n                    `Can not convert type \"${type}\" and value \"${value} to attribute`,\n                );\n        }\n    },\n};\n\nexport function query(selector: string, cache?: boolean) {\n    return (target: object, propertyKey: string | symbol): void => {\n        const cacheKey =\n            typeof propertyKey === \"symbol\" ? Symbol() : `__${propertyKey}`;\n\n        Object.defineProperty(target, propertyKey, {\n            enumerable: true,\n            configurable: true,\n            get() {\n                const thisAsRecord = this as unknown as {\n                    [key: string | symbol]: Element | null;\n                };\n\n                if (cache && thisAsRecord[cacheKey] !== undefined) {\n                    return thisAsRecord[cacheKey];\n                }\n\n                const result = this.renderRoot?.querySelector(selector) ?? null;\n\n                if (cache && result) {\n                    thisAsRecord[cacheKey] = result;\n                }\n\n                return result;\n            },\n        });\n    };\n}\n\nexport function queryAll(selector: string) {\n    return (target: object, propertyKey: string | symbol): void => {\n        Object.defineProperty(target, propertyKey, {\n            enumerable: true,\n            configurable: true,\n            get() {\n                return this.renderRoot?.querySelectorAll(selector) ?? [];\n            },\n        });\n    };\n}\n\nexport function queryAssignedElements(selector?: string, slot?: string) {\n    return (target: object, propertyKey: string | symbol): void => {\n        Object.defineProperty(target, propertyKey, {\n            enumerable: true,\n            configurable: true,\n            get(): HTMLElement[] {\n                return this.queryAssignedElements(selector, slot);\n            },\n        });\n    };\n}\n", "/*\n    Copyright (c) 2024 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nconst FFT_SIZE = 1024;\nconst HAS_AUDIO_CONTEXT = window.AudioContext !== undefined;\n\n/**\n * Since browsers limit the number of AudioContexts a page can use, this manages\n * a single AudioContext that can be used across multiple elements without\n * needing to create an AudioContext for each one.\n */\nexport class AudioContextManager {\n    private static _instance: AudioContextManager;\n    context: AudioContext;\n    analyser: AnalyserNode;\n    fftData: Uint8Array;\n    private _activeSource?: MediaElementAudioSourceNode;\n\n    private constructor() {\n        if (HAS_AUDIO_CONTEXT) {\n            this.createContext();\n        }\n    }\n\n    static get instance() {\n        if (!this._instance) {\n            this._instance = new this();\n        }\n        return this._instance;\n    }\n\n    private createContext() {\n        this.context = new window.AudioContext();\n        this.analyser = this.context.createAnalyser();\n        this.analyser.smoothingTimeConstant = 1;\n        this.analyser.fftSize = FFT_SIZE;\n        this.analyser.connect(this.context.destination);\n        this.fftData = new Uint8Array(this.analyser.fftSize);\n        this.activeSource = undefined;\n    }\n\n    private checkContext() {\n        if (!this.context) {\n            throw new Error(\"Audio context unavailable\");\n        }\n    }\n\n    createSource(mediaElement: HTMLMediaElement): MediaElementAudioSourceNode {\n        this.checkContext();\n        return this.context.createMediaElementSource(mediaElement);\n    }\n\n    get activeSource() {\n        return this._activeSource;\n    }\n\n    set activeSource(src: MediaElementAudioSourceNode | undefined) {\n        this.checkContext();\n\n        if (this.activeSource) {\n            this.activeSource.disconnect();\n        }\n\n        this._activeSource = src;\n\n        if (this._activeSource) {\n            this._activeSource.connect(this.analyser);\n            this.context.resume();\n        }\n    }\n\n    get analyzerData(): Uint8Array {\n        this.analyser.getByteTimeDomainData(this.fftData);\n        return this.fftData;\n    }\n}\n", "/*\n    Copyright (c) 2024 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nexport const prefersReducedMotion = window.matchMedia(\n    \"(prefers-reduced-motion: reduce)\",\n);\n", "/*\n    Copyright (c) 2024 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nimport { CustomElement, css, html } from \"../base/web-components\";\nimport { prefersReducedMotion } from \"../base/media-queries\";\nimport { AudioContextManager } from \"./context-manager\";\n\n/**\n * Audio oscilloscope, used by WinterAudioPlayerElement\n */\nexport class WinterAudioOscilloscopeElement extends CustomElement {\n    static override styles = [\n        css`\n            :host {\n                display: block;\n                width: 100%;\n                aspect-ratio: 4 / 1;\n            }\n\n            canvas {\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ];\n\n    private canvas: HTMLCanvasElement;\n    private ctx: CanvasRenderingContext2D;\n    private scope: Oscilloscope;\n\n    public start() {\n        this.scope.start();\n    }\n\n    public stop() {\n        this.scope.stop();\n    }\n\n    override render() {\n        const width = Math.floor(400 * window.devicePixelRatio);\n        const height = Math.floor(100 * window.devicePixelRatio);\n        const computedStyles = window.getComputedStyle(this);\n\n        this.canvas = html`<canvas\n            width=\"${width}\"\n            height=\"${height}\"></canvas>` as HTMLCanvasElement;\n\n        console.log(computedStyles.backgroundColor);\n\n        this.ctx = this.canvas.getContext(\"2d\", { alpha: false })!;\n        this.scope = new Oscilloscope(\n            this.ctx,\n            computedStyles.backgroundColor ?? \"#333333\",\n            computedStyles.color ?? \"#FF0000\",\n            5,\n        );\n\n        return html`${this.canvas}`;\n    }\n}\n\nwindow.customElements.define(\n    \"winter-audio-oscilloscope\",\n    WinterAudioOscilloscopeElement,\n);\n\nclass Oscilloscope {\n    public width: number;\n    public height: number;\n    public active: boolean = false;\n\n    constructor(\n        public ctx: CanvasRenderingContext2D,\n        public backgroundColor: string,\n        public strokeColor: string,\n        public strokeWidth: number,\n    ) {\n        this.width = ctx.canvas.width;\n        this.height = ctx.canvas.height;\n        this.clear();\n        this.drawSine();\n    }\n\n    start() {\n        this.active = true;\n        window.requestAnimationFrame(() => this.draw());\n    }\n\n    stop() {\n        this.active = false;\n    }\n\n    clear() {\n        this.ctx.beginPath();\n        this.ctx.fillStyle = this.backgroundColor;\n        this.ctx.fillRect(0, 0, this.width, this.height);\n    }\n\n    draw() {\n        if (!prefersReducedMotion.matches) {\n            this.drawAnalyzer();\n        } else {\n            this.drawSine();\n        }\n    }\n\n    drawAnalyzer() {\n        const data = AudioContextManager.instance.analyzerData;\n\n        this.clear();\n        this.ctx.lineJoin = \"round\";\n        this.ctx.lineWidth = this.strokeWidth;\n        this.ctx.strokeStyle = this.strokeColor;\n        this.ctx.beginPath();\n\n        for (let x = 0; x < this.width; x++) {\n            const sampleIdx = Math.round((x / this.width) * data.length);\n            const sample = data[sampleIdx] ?? 0;\n            const y = ((sample / 128) * this.height) / 2;\n\n            if (x === 0) {\n                this.ctx.moveTo(x, y);\n            } else {\n                this.ctx.lineTo(x, y);\n            }\n        }\n\n        this.ctx.lineTo(this.width + 10, this.height / 2);\n        this.ctx.stroke();\n\n        if (this.active) {\n            window.requestAnimationFrame(() => this.drawAnalyzer());\n        }\n    }\n\n    private sineOffset = 0;\n\n    drawSine() {\n        this.clear();\n        this.ctx.lineWidth = this.strokeWidth;\n        this.ctx.strokeStyle = this.strokeColor;\n        this.ctx.beginPath();\n\n        const divider = 4;\n        const width = this.width / divider;\n\n        for (let i = -2; i < width + 2; i++) {\n            var v = Math.sin(8 * Math.PI * (i / width) + this.sineOffset / 8);\n            var y = this.height / 2 + ((v * this.height) / 2) * 0.9;\n            if (i === -2) {\n                this.ctx.moveTo(i * divider, y);\n            } else {\n                this.ctx.lineTo(i * divider, y);\n            }\n        }\n\n        this.ctx.stroke();\n\n        this.sineOffset++;\n\n        if (this.active) {\n            window.requestAnimationFrame(() => this.drawSine());\n        }\n    }\n}\n", "/*\n    Copyright (c) 2024 Alethea Katherine Flowers.\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nimport { CustomElement, attribute, css, html } from \"../base/web-components\";\nimport { AudioContextManager } from \"./context-manager\";\nimport { WinterAudioOscilloscopeElement } from \"./oscilloscope\";\n\n/**\n * Audio player element with oscilloscope view\n */\nexport class WinterAudioPlayerElement extends CustomElement {\n    private static instances: Set<WinterAudioPlayerElement> = new Set();\n\n    static override styles = [\n        css`\n            :host {\n                box-sizing: border-box;\n                display: flex;\n                width: 100%;\n                max-width: 100%;\n                padding: 0;\n                color: white;\n                background-color: #408d94;\n                flex-direction: column;\n            }\n\n            audio {\n                box-sizing: border-box;\n                display: block;\n                width: 90%;\n                margin: 1em auto;\n            }\n\n            winter-audio-oscilloscope {\n                box-sizing: border-box;\n                background-color: inherit;\n                color: inherit;\n                margin: 0.5rem 0;\n            }\n\n            p {\n                box-sizing: border-box;\n                text-align: center;\n                margin: 0.5rem;\n            }\n        `,\n    ];\n\n    private audio: HTMLAudioElement;\n    private audioSourceNode: MediaElementAudioSourceNode;\n    private oscilloscope: WinterAudioOscilloscopeElement;\n\n    @attribute({ type: String })\n    src: string;\n\n    @attribute({ type: Boolean })\n    loop: boolean;\n\n    public get currentTime() {\n        return this.audio?.currentTime;\n    }\n\n    public set currentTime(value: number) {\n        this.audio.currentTime = value;\n    }\n\n    public get duration() {\n        return this.audio?.duration;\n    }\n\n    public get ended() {\n        return this.audio?.ended;\n    }\n\n    public get networkState() {\n        return this.audio?.networkState;\n    }\n\n    public get paused() {\n        return this.audio?.paused;\n    }\n\n    public get readyState() {\n        return this.audio?.readyState;\n    }\n\n    public get volume() {\n        return this.audio?.volume;\n    }\n\n    public set volume(value: number) {\n        this.audio.volume = value;\n    }\n\n    public play() {\n        this.audio?.play();\n    }\n\n    public pause() {\n        this.audio?.pause();\n    }\n\n    private pauseOthers() {\n        const staticThis = this.constructor as typeof WinterAudioPlayerElement;\n        for (const instance of staticThis.instances) {\n            if (instance !== this) {\n                instance.pause();\n            }\n        }\n    }\n\n    private connectSource() {\n        const manager = AudioContextManager.instance;\n\n        if (!this.audioSourceNode) {\n            this.audioSourceNode = manager.createSource(this.audio);\n        }\n\n        manager.activeSource = this.audioSourceNode;\n    }\n\n    private onAudioPlay() {\n        this.pauseOthers();\n        this.connectSource();\n        this.oscilloscope.start();\n    }\n\n    private onAudioPauseOrEnd() {\n        this.oscilloscope.stop();\n    }\n\n    override connectedCallback(): void | undefined {\n        super.connectedCallback();\n        const staticThis = this.constructor as typeof WinterAudioPlayerElement;\n        staticThis.instances.add(this);\n    }\n\n    override disconnectedCallback(): void | undefined {\n        super.disconnectedCallback();\n        const staticThis = this.constructor as typeof WinterAudioPlayerElement;\n        staticThis.instances.delete(this);\n    }\n\n    override render() {\n        let sources: NodeListOf<HTMLElement> | HTMLElement =\n            this.querySelectorAll(\"source\");\n\n        if (!sources.length) {\n            sources = html`<source src=\"${this.src}\" />` as HTMLElement;\n        }\n\n        this.audio = html`<audio\n            controls\n            crossorigin=\"anonymous\"\n            loop=\"${this.loop}\"\n            title=\"${this.title}\">\n            ${sources}\n        </audio>` as HTMLAudioElement;\n\n        this.audio.addEventListener(\"play\", () => {\n            this.onAudioPlay();\n        });\n\n        this.audio.addEventListener(\"pause\", () => {\n            this.onAudioPauseOrEnd();\n        });\n\n        this.audio.addEventListener(\"ended\", () => {\n            this.onAudioPauseOrEnd();\n        });\n\n        this.oscilloscope =\n            html`<winter-audio-oscilloscope></winter-audio-oscilloscope>` as WinterAudioOscilloscopeElement;\n\n        return html` ${this.oscilloscope} ${this.audio}\n            <p>${this.title}</p>`;\n    }\n}\n\nwindow.customElements.define(\"winter-audio-player\", WinterAudioPlayerElement);\n", "/*\n    Copyright (c) 2024 Winterbloom LLC, Alethea Katherine Flowers\n    Published under the standard MIT License.\n    Full text available at: https://opensource.org/licenses/MIT\n*/\n\nexport const VERSION = \"head\";\n\nimport \"./base/livereload\";\n\nexport * as Teeth from \"./teeth\";\nexport { WinterAudioPlayerElement } from \"./audio/player\";\n"],
  "mappings": "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",
  "names": []
}
